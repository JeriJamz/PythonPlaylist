#working on Enum
#MY SOUL HURT TAKE 2
import sys, time
from datetime import date
# trynna not to update this every 5 mins but new idea be poppin up


def qp(z):#qp is for quick print
	for x in z:
		sys.stdout.write(x)#nah I aint read doc over this but I program so... Tech Talk on it later
		sys.stdout.flush()
		time.sleep(.08)

def kqp(a):#kqp is kinda quick print
	for b in a:
		sys.stdout.write(b)
		sys.stdout.flush()
		time.sleep(.5)

class weekday(Enum):
	Sunday = 1  #so enum is really fancy singletons. It works with best with values that move in sequential order
	Monday = 2#as you see
	Tuesday = 3
	Wensday = 4
	Thursday = 5
	Friday = 6
	Saturday = 7
	def DayofTheWeek(cls, date):#thing that makes it a little diffrent is you can attach "behaviors"
		return cls(date.isoweekday())# Yea this is really it. I think this is a good explination for right now. Stay tuned

#gonna try and show todo
def show_2Do(ToDo, days):#Lil Bookwrk
	for ToDo,days in ToDo.items():
		if day in days:
			return ToDo
	show_2Do(ToDo4TheWeek, isoweekday())

kqp("Welcome\n")
qp("*****Loa")
kqp("din....g Menu\n")
print("Done!")

print("***Day Of The Week\n***Add Chores\n***Show ToDo")
qp("Enter a Menu Option")
response = input()

ToDo4TheWeek ={#want user input to add to this

}

if response.lower() == "Day Of The Week":
	print(weekday.DayofTheWeek(date.today()))
elif response.lower() == "Add Chore":
    qp("What is the name of the chore?/n")
	addChoreResponse = input()
	qp("Which day would you like to be reminded\n")
	DayOvWeek = input(weekday)#Maybe I need to add Weekday?
    ToDo4TheWeek.update(addChoreResponse:DayOvWeek)
elif response.lower() == "Show ToDo":
	print(show_2Do)#not good enough, want it to pull certain days
else:#idk know if this work but I program so hey. Good luck when you compile
	kqp("We aint got that many options shawty\n")
	sys.exit()

